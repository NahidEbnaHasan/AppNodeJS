#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('app_nodejs:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
*Create socket io
*/
var io = require('socket.io').listen(server);
var users = [];
var available_rooms = [];

io.on('connection', function(socket){

  io.emit('update available rooms', available_rooms);

  socket.on('create new room', function(data){
    available_rooms.push({'creator_id': data['id'], 'room_name' : data['room_name']});
    socket.join(data['room_name']);
    console.log(available_rooms);
    io.emit('create new room success', data);
  });

  socket.on('join room', function(data){
    socket.join(data['room_name']);
    io.emit('join room success', data);
  });

  socket.on('new user', function(data){
    if(userNotExist(data)){
      users.push({'id' : data['id'], 'user_name' : data['user_name']});
      console.log('New user added: ' + data);
      io.emit('new user success', data);
    }else{
      console.log('user not created');
      io.emit('new user error', data);
    }
  });

  socket.on('send message', function(data){
    console.log(data);
    io.to(data['room_name']).emit('incoming message', data);
    // socket.broadcast.emit('new message', data);
  });

  socket.on('get available rooms', function(data){
    io.emit('update available rooms', available_rooms);
  });
})

function userNotExist(data){
  if(users.length == 0){
    return true;
  }else{
    console.log('HERE');
    console.log(users);
    var u = users.filter(function(elm){ return elm['user_name'] == data['user_name']});
    return u.length == 0 ? true : false;
  }
}
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
